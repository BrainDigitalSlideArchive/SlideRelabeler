import multiprocessing.shared_memory
import os
import math
import io
import copy
import shutil
import sys
import tempfile
import ctypes
import pickle
import hashlib
import json
import logging
import base64
import xml.etree.ElementTree
from multiprocessing import shared_memory

from large_image_source_tiff import TiffFileTileSource
import qrcode
# '''
# To import pyvips in windows with 3.8+ you need to add the appropriate dlls to the path
# This part is altered from the original WSI DeiD codebase.
# '''

# Uncomment below if making production as these will be handled by pyinstaller.
# if os.name == 'nt':
#     class_dir = os.path.abspath(os.path.join(os.path.dirname(__file__)))
#     vips_bin_dir = os.path.join(class_dir, 'win-bin')
#     os.environ['PATH'] = os.pathsep.join((vips_bin_dir, os.environ['PATH']))
#     os.add_dll_directory(vips_bin_dir)

# import libtiff
import tifftools
# from large_image_source_tiff import TiffFileTileSource

import PIL

__version__ = '0.0.1'

from .wsi_deid_process import (
    get_generated_title,
    get_standard_redactions,
    redact_image_area,
    add_title_to_image,
    redact_topleft_square,
    determine_format,
    model_information,
    metadata_field_count,
    redact_format_philips_replace_macro,
    redact_format_hamamatsu_redact_wsi,
    redact_format_hamamatsu_replace_macro,
    redact_format_aperio_philips_redact_wsi,
    redact_format_aperio_add_image,
    redact_tiff_tags,
    add_deid_metadata,
    get_deid_field_dict,
    generate_system_redaction_list_entry,
    get_deid_field,
    PhilipsTagElements,
    philips_tag,
    dictToEtree
)

from . import config
from .file_io import TrackingFileIO
from .DeIdImageItem import DeIdImageItem as ImageItem

# TODO: fix/test text size in generated label.
# TODO: debug issue with libtiff large image source in MACOSX.

class DeidTools:
    processed_dir = None
    logger = None
    supress_print = False
    output_dir = None
    sep_height = 20
    pil_image_mode = "RGB"

    default_image = """
        
        """

    def get_current_write_progress(self, input_path):
        output_path = self.current_write_files[input_path].filename
        output_file_stats = os.stat(output_path)
        output_file_size = output_file_stats.st_size

        input_file_stats = os.stat(input_path)
        input_file_size = input_file_stats.st_size

        perc = output_file_size / input_file_size

        return perc

    def aperio_value_list(self, item, redactList, title):
        """
        Get a list of aperio values that can be joined with | to form the aperio
        comment.

        :param item: the item to redact.
        :param redactList: the list of redactions (see get_redact_list).
        :param title: the new title for the item.
        """
        tileSource = item.tileSource  # MODIFIED
        metadata = tileSource.getInternalMetadata() or {}
        aperioDict = {}
        if 'openslide' in metadata:
            comment = metadata["openslide"]["openslide.comment"]
            aperioHeader = comment.split("|", 1)[0]
            # Add defaults for required aperio fields to this dictionary
            for fullkey, value in metadata["openslide"].items():
                if fullkey.startswith("aperio."):
                    redactKey = "internal;openslide;" + fullkey.replace("\\", "\\\\").replace(
                        ";", "\\;"
                    )
                    value = redactList["metadata"].get(redactKey, {}).get("value", value)
                    if value is not None and "|" not in value:
                        key = fullkey.split(".", 1)[1]
                        if key.startswith("CustomField."):
                            continue
                        aperioDict[key] = value

        # From DeID Upload information
        aperioDict.update(get_deid_field_dict(item))
        # Required values
        aperioDict.update(
            {
                "Filename": title,
                "Title": title,
            }
        )
        aperioValues = [aperioHeader] + [
            "%s = %s" % (k, v) for k, v in sorted(aperioDict.items())
        ]
        return aperioValues

    def add_text_to_image(self, image, title, previouslyAdded=False, minWidth=384,
                          background='#000000', textColor='#ffffff', square=True,
                          item=None):
        """
        Add a title to an image.  If the image doesn't exist, a new image is made
        the minimum width and appropriate height.  If the image does exist, a bar
        is added at its top to hold the title.  If an existing image is smaller
        than minWidth, it is pillarboxed to the minWidth.

        Rewritten from WSI DeiD given hardcoded font that is not available in windows.

        :param image: a PIL image or None.
        :param title: a text string.
        :param previouslyAdded: if true and modifying an image, don't allocate more
            space for the title; overwrite the top of the image instead.
        :param minWidth: the minimum width for the new image.
        :param background: the background color of the title and any necessary
            pillarbox.
        :param textColor: the color of the title text.
        :param square: if True, output a square image.
        :param item: the original item record.
        :returns: a PIL image.
        """
        title = title or ''
        if image is None:
            image = PIL.Image.new(self.pil_image_mode, (750, 750))
        image = image.convert(self.pil_image_mode)
        imageDrawFont = None
        w, h = image.size
        background = PIL.ImageColor.getcolor(background, self.pil_image_mode)
        textColor = PIL.ImageColor.getcolor(textColor, self.pil_image_mode)
        targetW = max(minWidth, w)
        fontSize = 0.15
        imageDraw = PIL.ImageDraw.Draw(image)
        # Altered line from WSI DeID rewirtten so font is local to library
        file_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'fonts', 'DejaVuSansMono.ttf')
        for iter in range(3, 0, -1):
            try:
                imageDrawFont = PIL.ImageFont.truetype(
                    font=file_path,
                    size=int(fontSize * targetW),
                )
            except IOError:
                try:
                    imageDrawFont = PIL.ImageFont.truetype(
                        font="arial.ttf",
                        size=int(fontSize * targetW),
                    )
                except IOError:
                    imageDrawFont = PIL.ImageFont.load_default()
            if imageDrawFont is None:
                imageDrawFont = PIL.ImageFont.load_default()
            textL, textT, textR, textB = imageDrawFont.getbbox(title)
            textW = textR - textL
            # if there is no width, there is no title
            if not textW:
                return
            textH = textB  # from old imageDraw.textsize(title, imageDrawFont)
            if iter != 1 and (textW > targetW * 0.95 or textW < targetW * 0.85):
                fontSize = fontSize * targetW * 0.9 / textW
        titleH = int(math.ceil(textH * 1.25))
        if square and (w != h or (not previouslyAdded or w != targetW or h < titleH)):
            if targetW < h + titleH:
                targetW = h + titleH
            else:
                titleH = targetW - h
        if previouslyAdded and w == targetW and h >= titleH:
            newImage = image.copy()
        else:
            newImage = PIL.Image.new(mode=self.pil_image_mode, size=(targetW, h + titleH), color=background)
            newImage.paste(image, (int((targetW - w) / 2), titleH))
        imageDraw = PIL.ImageDraw.Draw(newImage)
        imageDraw.rectangle((0, 0, targetW, titleH + self.sep_height), fill=background, outline=None, width=0)
        imageDraw.text(
            xy=(int((targetW - textW) / 2), int((titleH - textH) / 2) + self.sep_height),
            text=title,
            fill=textColor,
            font=imageDrawFont)
        titleH = titleH + self.sep_height*2
        return newImage, titleH

    def check_if_needed_dir_exist(self):
        if not os.path.exists(self.processed_dir) and not os.path.isdir(self.processed_dir):
            print("The folder for the processed output does not exist")

    def create_temp_file_from_buffer(self, buffer, filename):
        '''
        :param buffer: A buffer object with a read interface to create the test_file
        :param ext: the file extension which will be a suffix for the file
        :return: NamedTemporaryFile object that is created using supplied file that provides a name that can be used
        in the workflow
        '''
        ext = os.path.splitext(filename)[1]
        temp_file = tempfile.NamedTemporaryFile(mode='wb', prefix='wsi_deid_',suffix=ext, delete=True)
        temp_file.write(buffer.read())

        return temp_file

    def close_temp_file(self, temp_file):
        '''
        :param temp_file: A NamedTempFile that will be deleted
        :return:
        '''
        temp_file.close()

    def replace_title_if_needed(self, filename, desired_title=None):
        '''

        :param filename: a filename that will be used to generate a new title if desired_title is None
        :param desired_title: a desired title that will be used if not None
        :return:
        '''
        if desired_title is None and desired_title != os.path.basename(filename):
            desired_title = hashlib.blake2b(filename.encode('utf-8')).hexdigest()

        return desired_title

    def get_standard_redactions_format_isyntax(self, item, tileSource, tiffinfo, title):

        metadata = tileSource.getInternalMetadata() or {}
        redactList = {
            "images": {},
            "metadata": {
                "internal;isyntax;scanner_operator_id": generate_system_redaction_list_entry(
                    title
                ),
                "internal;isyntax;barcode": generate_system_redaction_list_entry(
                    title + "|" + get_deid_field(item)
                ),
                "internal;isyntax;software_versions": generate_system_redaction_list_entry(
                    (
                        tileSource.getInternalMetadata()["isyntax"].get(
                            "software_versions", ""
                        )
                        + ' "DSA Redaction %s' % __version__
                        + '"'
                    ).strip()
                ),
            },
        }
        for key in {"acquisition_datetime", "date_of_last_calibration"}:
            if metadata["isyntax"].get(key):
                value = metadata["isyntax"][key]
                if isinstance(value, list):
                    value = value[0]
                value = value.split(".")[0]
                if len(value) < 8:
                    value = None
                else:
                    value = value[:4] + "0101" + ("0" * len(value[8:]))
                redactList["metadata"]["internal;isyntax;%s" % key] = (
                    generate_system_redaction_list_entry(value)
                )
        return redactList

    def create_file_io_write_buffer(self, filename):
        '''
        :param filename: a filename that will be used to create a file buffer
        :return: a file buffer
        '''
        return io.FileIO(filename, 'w')
    
    def redact_format_philips(self, item, output_dir, redactList, title, labelImage, macroImage, preview_metadata=False):
        """
        Redact philips files.

        :param item: the item to redact.
        :param tempdir: a directory for work files and the final result.
        :param redactList: the list of redactions (see get_redact_list).
        :param title: the new title for the item.
        :param labelImage: a PIL image with a new label image.
        :param macroImage: a PIL image with a new macro image.  None to keep or
            redact the current macro image.
        :returns: (filepath, mimetype) The redacted filepath in the tempdir and
            its mimetype.
        """
        tileSource = ImageItem().tileSource(item)
        sourcePath = tileSource._getLargeImagePath()
        tiffinfo = tifftools.read_tiff(sourcePath)
        xmldict = tileSource._tiffDirectories[-1]._description_record
        ifds = tiffinfo['ifds']
        prior_ifds = copy.deepcopy(ifds)
        if redactList.get('area', {}).get('_wsi', {}).get('geojson'):
            ifds = redact_format_aperio_philips_redact_wsi(
                tileSource, ifds, redactList['area']['_wsi']['geojson'], output_dir)
            ImageItem().removeThumbnailFiles(item)
        # redact images from xmldict
        images = philips_tag(xmldict, 'PIM_DP_SCANNED_IMAGES')
        for key, pkey in [('macro', 'MACROIMAGE'), ('label', 'LABELIMAGE')]:
            if key in redactList['images'] and images:
                if key == 'macro' and macroImage:
                    continue
                tag = philips_tag(
                    xmldict, 'PIM_DP_SCANNED_IMAGES', None, 'PIM_DP_IMAGE_TYPE', pkey)
                if tag:
                    tag[-1][0].pop(tag[-1][1])
        # redact images from ifds
        ifds = [ifd for ifd in ifds
                if ifd['tags'].get(tifftools.Tag.ImageDescription.value, {}).get(
                'data', '').split()[0].lower() not in redactList['images'] or (
                    ifd['tags'].get(tifftools.Tag.ImageDescription.value, {}).get(
                        'data', '').split()[0].lower() == 'macro' and macroImage)]

        redactList = copy.copy(redactList)
        title_redaction_list_entry = generate_system_redaction_list_entry(title)
        redactList['metadata']['internal;xml;PIIM_DP_SCANNER_OPERATOR_ID'] = title_redaction_list_entry
        redactList['metadata']['internal;xml;PIM_DP_UFS_BARCODE'] = \
            generate_system_redaction_list_entry(title + '|' + get_deid_field(item))
        # redact general tiff tags
        redact_tiff_tags(ifds, redactList, title)
        add_deid_metadata(item, ifds)
        # remove redacted philips tags
        for key in redactList['metadata']:
            if not key.startswith('internal;xml;'):
                continue
            key = key.split(';', 2)[-1]
            parts = key.split('|') + [None]
            tag = philips_tag(xmldict, parts[0], None, parts[1])
            if tag:
                if parts[1] is not None:
                    tag[-1][2].pop(tag[-1][3])
                else:
                    tag[2].pop(tag[3])
        # Add back philips tags with values
        for key, value in redactList['metadata'].items():
            if not key.startswith('internal;xml;'):
                continue
            key = key.split(';', 2)[-1]
            if value is not None and '|' not in key and key in PhilipsTagElements:
                value = value['value'] if isinstance(value, dict) else value
                plist = xmldict['DataObject']['Attribute']
                pelem = PhilipsTagElements[key]
                entry = {
                    'Name': key,
                    'Group': pelem[0],
                    'Element': pelem[1],
                    'PMSVR': pelem[2],
                    'text': (
                        value if key != 'PIM_DP_UFS_BARCODE' else
                        base64.b64encode(value.encode()).decode()),
                }
                plist.insert(0, entry)
        tag = philips_tag(xmldict, 'PIM_DP_SCANNED_IMAGES')

        with tempfile.TemporaryDirectory() as temp_dir:
            redact_format_philips_replace_macro(
                macroImage, ifds, temp_dir, tag[2][tag[3]]['Array']['DataObject'])
        
            # Insert label image
            if labelImage:
                labelPath = os.path.join(temp_dir, 'label.tiff')
                labelImage.save(labelPath, format='tiff', compression='jpeg', quality=90)
                labelinfo = tifftools.read_tiff(labelPath)
                labelinfo['ifds'][0]['tags'][tifftools.Tag.ImageDescription.value] = {
                    'datatype': tifftools.Datatype.ASCII,
                    'data': 'Label',
                }
                labelinfo['ifds'][0]['tags'][tifftools.Tag.NewSubfileType] = {
                    'data': [1], 'datatype': tifftools.Datatype.LONG}
                ifds.extend(labelinfo['ifds'])
                jpeg = io.BytesIO()
                labelImage.save(jpeg, format='jpeg', quality=90)

                if isinstance(tag[2][tag[3]]['Array']['DataObject'], dict):
                    tag[2][tag[3]]['Array']['DataObject'] = [tag[2][tag[3]]['Array']['DataObject']]
                tag[2][tag[3]]['Array']['DataObject'].append({
                    'Attribute': [{
                        'Name': 'PIM_DP_IMAGE_TYPE',
                        'Group': '0x301D',
                        'Element': '0x1004',
                        'PMSVR': 'IString',
                        'text': 'LABELIMAGE',
                    }, {
                        'Name': 'PIM_DP_IMAGE_DATA',
                        'Group': '0x301D',
                        'Element': '0x1005',
                        'PMSVR': 'IString',
                        'text': base64.b64encode(jpeg.getvalue()).decode(),
                    }],
                    'ObjectType': 'DPScannedImage',
                })
            ifds[0]['tags'][tifftools.Tag.ImageDescription.value] = {
                'datatype': tifftools.Datatype.ASCII,
                'data': xml.etree.ElementTree.tostring(
                    dictToEtree(xmldict), encoding='utf8', method='xml').decode(),
            }

            if preview_metadata:
                return prior_ifds, ifds
            else:
                return self.handle_write_tiff(sourcePath, ifds, output_dir, title, "tiff")

    def redact_format_aperio(self, item: ImageItem, output_dir, redactList, title, labelImage, macroImage, preview_metadata=False):
        """
        Redact aperio files.

        :param item: the item to redact.
        :param output_dir: a directory for work files and the final result.
        :param redactList: the list of redactions (see get_redact_list).
        :param title: the new title for the item.
        :param labelImage: a PIL image with a new label image.
        :param macroImage: a PIL image with a new macro image.  None to keep or
            redact the current macro image.
        :returns: (filepath, mimetype) The redacted filepath in the tempdir and
            its mimetype.
        """

        tileSource = item.tileSource  ##MODDED
        sourcePath = tileSource._getLargeImagePath()
        self.logger.info("Redacting aperio file %s", sourcePath)
        # print(f"Redacting aperio file {sourcePath}")
        tiffinfo = tifftools.read_tiff(sourcePath)
        # print(f"Opened file using tifftools")
        ifds = tiffinfo["ifds"]
        prior_ifds = copy.deepcopy(ifds)
        # print(f"IFDs gotten")
        if redactList.get("area", {}).get("_wsi", {}).get("geojson"):
            # print(f"Calling redact_format_aperio_philips_redact_wsi")
            ifds = redact_format_aperio_philips_redact_wsi(
                tileSource, ifds, redactList["area"]["_wsi"]["geojson"], output_dir
            )
            # print(f"Returned from redact_format_aperio_philips_redact_wsi")
            ## ImageItem().removeThumbnailFiles(item) TBD
        # print(f"Trying aperio_value_list")
        aperioValues = self.aperio_value_list(item, redactList, title)
        # print(f"Aperio values {aperioValues}")
        imageDescription = "|".join(aperioValues)
        # We expect aperio to have the full resolution image in directory 0, the
        # thumbnail in directory 1, lower resolutions starting in 2, and label and
        # macro images in other directories.  Confirm this -- our tiff reader will
        # report the directories used for the full resolution.

        # print(f"Creating TiffFileTileSource")
        tiffSource = TiffFileTileSource(item._largeImagePath)
        # print(f"Created TiffFileTileSource")
        mainImageDir = [
            dir._directoryNum for dir in tiffSource._tiffDirectories[::-1] if dir
        ]
        associatedImages = tileSource.getAssociatedImagesList()
        if mainImageDir != [
            d + (1 if d and "thumbnail" in associatedImages else 0)
            for d in range(len(mainImageDir))
        ]:
            raise Exception("Aperio directories are not as expected")
        firstAssociatedIdx = max(mainImageDir) + 1
        # Set new image description
        # print(f"Setting new image description")
        ifds[0]["tags"][tifftools.Tag.ImageDescription.value] = {
            "datatype": tifftools.Datatype.ASCII,
            "data": imageDescription,
        }
        # redact or adjust thumbnail
        if "thumbnail" in associatedImages:
            if "thumbnail" in redactList["images"]:
                ifds.pop(1)
                firstAssociatedIdx -= 1
            else:
                thumbnailComment = ifds[1]["tags"][tifftools.Tag.ImageDescription.value][
                    "data"
                ]
                thumbnailDescription = "|".join(
                    thumbnailComment.split("|", 1)[0:1] + aperioValues[1:]
                )
                ifds[1]["tags"][tifftools.Tag.ImageDescription.value][
                    "data"
                ] = thumbnailDescription
        # redact other images
        for idx in range(len(ifds) - 1, 0, -1):
            ifd = ifds[idx]
            key = None
            keyparts = (
                ifd["tags"]
                .get(tifftools.Tag.ImageDescription.value, {})
                .get("data", "")
                .split("\n", 1)[-1]
                .strip()
                .split()
            )
            if len(keyparts) and keyparts[0].lower() and not keyparts[0][0].isdigit():
                key = keyparts[0].lower()
            if (
                key is None
                and ifd["tags"].get(tifftools.Tag.NewSubfileType.value)
                and ifd["tags"][tifftools.Tag.NewSubfileType.value]["data"][0]
                & tifftools.Tag.NewSubfileType.bitfield.ReducedImage.value
            ):
                key = (
                    "label"
                    if ifd["tags"][tifftools.Tag.NewSubfileType.value]["data"][0] == 1
                    else "macro"
                )
            if (
                key in redactList["images"]
                or key == "label"
                or (key == "macro" and macroImage)
            ):
                ifds.pop(idx)

        with tempfile.TemporaryDirectory() as temp_dir:
            # Add back label and macro image
            if macroImage:
                redact_format_aperio_add_image(
                    "macro", macroImage, ifds, firstAssociatedIdx, temp_dir, aperioValues
                )
            if labelImage:
                redact_format_aperio_add_image(
                    "label", labelImage, ifds, firstAssociatedIdx, temp_dir, aperioValues
                )
            # redact general tiff tags
            redact_tiff_tags(ifds, redactList, title)
            add_deid_metadata(item, ifds)

            if preview_metadata:
                return prior_ifds, ifds
            else:
                return self.handle_write_tiff(sourcePath, ifds, output_dir, title, "svs")
        

    def get_final_output_path(self, desired_output_path):
        no_desired_output_path = True
        count = 0
        ext = os.path.splitext(desired_output_path)[1]
        output_path = desired_output_path

        while no_desired_output_path:
            if os.path.exists(output_path):
                count += 1
                output_path = desired_output_path.replace(ext, f'_({count}){ext}')
            else:
                no_desired_output_path = False

        return output_path

    def attempt_replace_wsi_file(self, partial_output_path, desired_output_path):
        output_path = self.get_final_output_path(desired_output_path)
        os.replace(partial_output_path, output_path)

        return output_path        

    def handle_write_tiff(self, sourcePath, ifds, output_dir, title, ext_without_dot):
        output_path = os.path.join(output_dir, '{}.{}'.format(title, ext_without_dot))
        final_output_path = self.get_final_output_path(output_path)
        partial_output_path = os.path.join('{}.partial'.format(final_output_path))

        if os.path.exists(partial_output_path):
            os.unlink(partial_output_path)
        
        tracking_file_io = TrackingFileIO(partial_output_path, 'w')

        tifftools.write_tiff(ifds, tracking_file_io)
        tracking_file_io.close()
        output_path = self.attempt_replace_wsi_file(partial_output_path, output_path)

        self.logger.info("Redacted aperio file %s as %s", sourcePath, output_path)
        return output_path, "image/tiff"


    def get_output_path(self, output_dict):
        rename = self.get_rename(output_dict)
        output_path = os.path.join(output_dict['__reserved']['destinationDirectory'], rename)
        output_path = self.get_final_output_path(output_path)
        return output_path

    def add_icon_to_image(self, image, output_dict, output_height=0):
        label_config = output_dict['config']['label']
        if image is None:
            image = PIL.Image.new(self.pil_image_mode, (750, 750))

        image_path = label_config['icon_file']['source']['path']
        if os.path.exists(image_path):
            icon_image = PIL.Image.open(image_path)
        else:
            image_data = base64.b64decode(self.default_image)
            icon_image = PIL.Image.open(io.BytesIO(image_data))

        if icon_image.size[0] > 740:
            new_width  = 740
            new_height = new_width * icon_image.size[1] // icon_image.size[0]
            resize_dim = (new_width, new_height)

            icon_image = icon_image.resize(resize_dim, PIL.Image.LANCZOS)

        position = (image.size[0] // 2 - icon_image.size[0] // 2, output_height + self.sep_height)

        image.paste(icon_image, position)

        output_height = output_height + self.sep_height*2 + icon_image.size[1]

        return image, output_height

    def get_field_data(self, output_dict, field):
        if field == 'rename':
            return self.get_rename(output_dict)
        else:
            field_split = field.split('.')
            data = output_dict
            for subfield in field_split:
                if subfield in data:
                    data = data.get(subfield)
            return data

    def add_qr_code_to_image(self, image, output_dict, desired_title, output_height=0):
        if image is None:
            image = PIL.Image.new(self.pil_image_mode, (750, 750))

        qr_data = {}
        qr_code_string = None

        if 'config' in output_dict and 'label' in output_dict['config'] and 'qr_mode' in output_dict['config']['label']:
            label_config = output_dict['config']['label']
            qr_mode = label_config['qr_mode']['value']
            match qr_mode:
                case 'uuid':
                    qr_code_string = output_dict['__reserved']['uuid']
                case 'column_field':
                    if 'qr_column_field' in label_config and label_config['qr_column_field']['value'] in output_dict:
                        field = label_config['qr_column_field']['value']
                        qr_code_string = str(self.get_field_data(output_dict, field))
                case 'column_fields':
                    if 'qr_column_fields' in label_config:
                        for field_item in label_config['qr_column_fields']:
                            field = field_item['value']
                            qr_data[field] = self.get_field_data(output_dict, field)
                    qr_code_string = base64.b64encode(json.dumps(qr_data).encode('utf-8'))
                case 'user_defined':
                    qr_code_string = desired_title
                case 'none':
                    qr_code_string = ''
                case _:
                    qr_code_string = ''

        if qr_code_string is not None:
            qr_code = qrcode.make(qr_code_string)
            image_cropped = image.crop((0, 0, image.size[0], output_height))
            width = max(qr_code.size[0], image_cropped.size[0])

            if qr_code.size[1] > (750 - output_height - self.sep_height):
                image = PIL.Image.new(self.pil_image_mode, (width, output_height + qr_code.size[1] + self.sep_height*2))
                image.paste(image_cropped, (0,0))
                image.paste(qr_code, (width // 2 - qr_code.size[0] // 2, output_height + self.sep_height))
            else:
                image = PIL.Image.new(self.pil_image_mode, (width, output_height + qr_code.size[1] + self.sep_height*2))
                image.paste(image_cropped, (0,0))
                image.paste(qr_code, (width // 2 - qr_code.size[0] // 2, output_height + self.sep_height))

            output_height = qr_code.size[1] + output_height + self.sep_height + self.sep_height

        return image, output_height

    def get_deid_label(self, output_dict):
        label_config = output_dict['config']['label']

        desired_title = self.get_rename(output_dict)

        if desired_title is not None:
            curItem = ImageItem(output_dict['__reserved']['source']['path'], {"name": desired_title})
        else:
            curItem = ImageItem(output_dict['__reserved']['source']['path'])

        redactList = get_standard_redactions(curItem, desired_title)

        tileSource = curItem.tileSource

        newTitle = get_generated_title(
            curItem
        )

        labelImage = None
        label_geojson = redactList.get("images", {}).get("label", {}).get("geojson")

        ## TO IMPLEMENT...
        if (
            "label" not in redactList["images"]
            and not config.getConfig("always_redact_label")
        ) or label_geojson is not None:
            try:
                labelImage = PIL.Image.open(
                    io.BytesIO(tileSource.getAssociatedImage("label")[0])
                )
            except Exception:
                pass
        if label_geojson is not None and labelImage is not None:
            labelImage = redact_image_area(labelImage, label_geojson)

        output_height = 0

        if label_config['add_text']:
            text = self.get_label_text(output_dict)
            if not isinstance(text, str):
                text = str(text)
            if len(text) > 0:
                labelImage, output_height = self.add_text_to_image(labelImage, text, False, item=curItem)
        if label_config['add_icon']:
            labelImage, output_height = self.add_icon_to_image(labelImage, output_dict, output_height)
        if label_config['add_qr']:
            labelImage, output_height = self.add_qr_code_to_image(labelImage, output_dict, desired_title, output_height)

        if labelImage is not None:
            labelImage = labelImage.crop((0, 0, labelImage.size[0], output_height))
        else:
            labelImage = PIL.Image.new(self.pil_image_mode, (50, 50))

        return labelImage

    def get_label_text(self, output_dict):
        text = ''

        if 'config' in output_dict and 'label' in output_dict['config']:
            label_config = output_dict['config']['label']
            if 'text_column_field' in label_config and label_config['text_column_field'] is not None:
                field = label_config['text_column_field']['value']
                text = self.get_field_data(output_dict, field)

        return text

    def pil_to_base64(self, pil_img):
        """Convert a PIL Image to base64 string."""
        img_buffer = io.BytesIO()
        pil_img.save(img_buffer, format="PNG")  # Adjust format as needed
        base64_str = base64.b64encode(img_buffer.getvalue()).decode('utf-8')
        return 'image/png', base64_str

    def get_rename(self, output_dict):
        temp = ''

        if 'config' in output_dict and 'filename' in output_dict['config']:
            filename_config = output_dict['config']['filename']
            if 'use_uuid' in filename_config and filename_config['use_uuid']:
                if 'uuid' in output_dict['__reserved']:
                    temp += output_dict['__reserved']['uuid']
            elif not filename_config['use_uuid'] and 'rename' in output_dict['__reserved'] and len(output_dict['__reserved']['rename']) > 0:
                temp += output_dict['__reserved']['rename']
            elif 'desired_title' == '' and 'source' in output_dict and 'filename' in output_dict['__reserved']['source']:
                temp += output_dict['__reserved']['source']['filename']
            else:
                temp += 'None'

            if 'use_prefix' in filename_config and filename_config['use_prefix'] and 'prefix' in filename_config:
                temp = filename_config['prefix'] + temp
            if 'use_suffix' in filename_config and filename_config['use_suffix'] and 'suffix' in filename_config:
                temp = temp + filename_config['suffix']

            temp = temp + output_dict['__reserved']['source']['parsed']['ext']

        return temp

    def preview_label(self, output_dict):
        labelImage = self.get_deid_label(output_dict)

        return labelImage

    def preview_macro(self, output_dict):
        macroImage = self.get_deid_macro(output_dict)

        return macroImage

    def return_deid_setup(self, output_dict):
        filename = output_dict['__reserved']['source']['path']

        if output_dict['config']['filename']['use_uuid']:
            desired_title = output_dict['__reserved']['uuid']
        else:
            desired_title = output_dict['__reserved']['rename']

        if desired_title is not None:
            curItem = ImageItem(filename, {"name": desired_title})
        else:
            curItem = ImageItem(filename)

        tileSource = curItem.tileSource

        redactList = get_standard_redactions(curItem, desired_title)

        return curItem, tileSource, redactList

    def get_deid_macro(self, output_dict):
        curItem, tileSource, redactList = self.return_deid_setup(output_dict)

        macroImage = None
        macro_geojson = redactList.get("images", {}).get("macro", {}).get("geojson")
        redact_square_default = "macro" not in redactList[
            "images"
        ] and config.getConfig("redact_macro_square")
        redact_square_manual = "macro" in redactList["images"] and redactList["images"][
            "macro"
        ].get("square")
        redact_square = redact_square_default or redact_square_manual
        if redact_square or macro_geojson:
            try:
                if 'label' in output_dict['config'] and 'wsi' in output_dict['config']['label']:
                    if output_dict['config']['label']['wsi']['save_macro_image']:
                        macroImage = PIL.Image.open(
                            io.BytesIO(tileSource.getAssociatedImage("macro")[0])
                        )
                # ImageItem().removeThumbnailFiles(item)
            except Exception:
                pass

        if macroImage is not None:
            if redact_square:
                macroImage = redact_topleft_square(macroImage)
            elif macro_geojson:
                macroImage = redact_image_area(macroImage, macro_geojson)
        else:
            macroImage = PIL.Image.new(self.pil_image_mode, (50, 50))

        return macroImage

    def redact_format_ometiff(self, item, output_dir, redactList, title, labelImage, macroImage, preview_metadata=False):  # noqa
        """
        Redact ometiff files.

        :param item: the item to redact.
        :param tempdir: a directory for work files and the final result.
        :param redactList: the list of redactions (see get_redact_list).
        :param title: the new title for the item.
        :param labelImage: a PIL image with a new label image.
        :param macroImage: a PIL image with a new macro image.  None to keep or
            redact the current macro image.
        :returns: (filepath, mimetype) The redacted filepath in the tempdir and
            its mimetype.
        """

        import large_image_source_ometiff

        tileSource = ImageItem().tileSource(item)
        sourcePath = tileSource._getLargeImagePath()
        tiffinfo = tifftools.read_tiff(sourcePath)
        ifds = tiffinfo['ifds']
        prior_ifds = copy.deepcopy(ifds)
        if redactList.get('area', {}).get('_wsi', {}).get('geojson'):
            ifds = redact_format_aperio_philips_redact_wsi(
                tileSource, ifds, redactList['area']['_wsi']['geojson'], tempdir)
            ImageItem().removeThumbnailFiles(item)
        tiffSource = large_image_source_ometiff.open(item.filePath)
        mainImageDir = [dir._directoryNum for dir in tiffSource._tiffDirectories[::-1] if dir]
        firstAssociatedIdx = max(mainImageDir) + 1
        # redact other images
        for idx in range(len(ifds) - 1, 0, -1):
            ifd = ifds[idx]
            key = None
            keyparts = ifd['tags'].get(tifftools.Tag.ImageDescription.value, {}).get(
                'data', '').split('\n', 1)[-1].strip().split()
            if len(keyparts) and keyparts[0].lower() and not keyparts[0][0].isdigit():
                key = keyparts[0].lower()
            if (key is None and ifd['tags'].get(tifftools.Tag.NewSubfileType.value) and
                    ifd['tags'][tifftools.Tag.NewSubfileType.value]['data'][0] &
                    tifftools.Tag.NewSubfileType.bitfield.ReducedImage.value):
                key = 'label' if ifd['tags'][
                    tifftools.Tag.NewSubfileType.value]['data'][0] == 1 else 'macro'
            if key in redactList['images'] or key == 'label' or (key == 'macro' and macroImage):
                ifds.pop(idx)
        
        # redact general tiff tags
        redact_tiff_tags(ifds, redactList, title)

        reduced = {}
        refs = {}
        xmldict = tileSource.getInternalMetadata()['omeinfo']
        tileSource._reduceInternalMetadata(reduced, xmldict, refs=refs)
        process = []
        for key in redactList.get('metadata', {}):
            rkey = key
            if key.startswith('internal;omereduced;') and key not in refs:
                rkey = key.split('internal;omereduced;', 1)[1]
            if rkey in refs:
                newval = redactList['metadata'][key].get('value')
                dref, dkey, didx, dskey = refs[rkey]
                process.append((didx, dkey, dskey, rkey, dref, newval))
        process.sort(reverse=True)
        for didx, dkey, dskey, _, dref, newval in process:
            if newval is None:
                if didx is None:
                    del dref[dkey]
                else:
                    dref[dkey][didx:didx + 1] = []
            else:
                if didx is None:
                    if dskey:
                        dref[dkey][dskey] = newval
                    else:
                        dref[dkey] = newval
                else:
                    if dskey:
                        dref[dkey][didx][dskey] = newval
                    else:
                        dref[dkey][didx] = newval
        ifds[0]['tags'][tifftools.Tag.ImageDescription.value] = {
            'datatype': tifftools.Datatype.ASCII,
            'data':
                '<?xml version="1.0" encoding="UTF-8"?>'
                '<OME xmlns="http://www.openmicroscopy.org/Schemas/OME/2016-06" '
                'xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" '
                # Should we inject a UUID here?
                # 'UUID="urn:uuid:..." '
                # where that would be the uuid v5 of the sha-1 hash of the rest of
                # the xml
                'xsi:schemaLocation="http://www.openmicroscopy.org/Schemas/OME/2016-06 '
                'http://www.openmicroscopy.org/Schemas/OME/2016-06/ome.xsd">' +
                ''.join(xml.etree.ElementTree.tostring(child, encoding='unicode')
                        for child in dictToEtree(xmldict)) +
                '</OME>',
        }

        with tempfile.TemporaryDirectory() as temp_dir:
            # redact general tiff tags
            add_deid_metadata(item, ifds)

            if preview_metadata:
                return prior_ifds, ifds
            else:
                return self.handle_write_tiff(sourcePath, ifds, output_dir, title, "ome.tif")

    def redact_format_hamamatsu(self, item, output_dir, redactList, title, labelImage, macroImage, preview_metadata=False):
        tileSource = ImageItem().tileSource(item)
        sourcePath = tileSource._getLargeImagePath()
        tiffinfo = tifftools.read_tiff(sourcePath)
        ifds = tiffinfo['ifds']
        prior_ifds = copy.deepcopy(ifds)
        if redactList.get('area', {}).get('_wsi', {}).get('geojson'):
            ifds = redact_format_hamamatsu_redact_wsi(
                tileSource, ifds, redactList['area']['_wsi']['geojson'], tempdir)
            ImageItem().removeThumbnailFiles(item)
        sourceLensTag = tifftools.Tag.NDPI_SOURCELENS.value
        for key in redactList['images']:
            if key == 'macro' and macroImage:
                continue
            lensval = {'macro': -1, 'nonempty': -2}
            ifds = [ifd for ifd in ifds
                    if sourceLensTag not in ifd['tags'] or
                    ifd['tags'][sourceLensTag]['data'][0] != lensval.get(key)]
        redact_tiff_tags(ifds, redactList, title)
        add_deid_metadata(item, ifds)
        propertyTag = tifftools.Tag.NDPI_PROPERTY_MAP.value
        if propertyTag in ifds[0]['tags']:
            propertyList = ifds[0]['tags'][propertyTag]['data'].replace('\r', '\n').split('\n')
            ndpiProperties = {p.split('=')[0]: p.split('=', 1)[1] for p in propertyList if '=' in p}
            for fullkey, value in redactList['metadata'].items():
                if fullkey.startswith('internal;openslide;hamamatsu.'):
                    key = fullkey.split('internal;openslide;hamamatsu.', 1)[1]
                    if key in ndpiProperties:
                        if value is None:
                            del ndpiProperties[key]
                        else:
                            ndpiProperties[key] = value['value'] if isinstance(
                                value, dict) and 'value' in value else value
            propertyList = ['%s=%s\r\n' % (k, v) for k, v in ndpiProperties.items()]
            propertyMap = ''.join(propertyList)
            for ifd in ifds:
                ifd['tags'][tifftools.Tag.NDPI_REFERENCE.value] = {
                    'datatype': tifftools.Datatype.ASCII,
                    'data': title,
                }
                ifd['tags'][propertyTag] = {
                    'datatype': tifftools.Datatype.ASCII,
                    'data': propertyMap,
                }

        with tempfile.TemporaryDirectory() as temp_dir:
            if macroImage:
                redact_format_hamamatsu_replace_macro(
                   macroImage, ifds, temp_dir
                )
            # redact general tiff tags
            add_deid_metadata(item, ifds)

            if preview_metadata:
                return prior_ifds, ifds
            else:
                return self.handle_write_tiff(sourcePath, ifds, output_dir, title, "ndpi")

    def setup_deid(self, output_dict):
        filename = output_dict['__reserved']['source']['path']
        output_dir = output_dict['__reserved']['destinationDirectory']

        filename_config = output_dict['config']['filename']
        wsi_config = output_dict['config']['wsi']

        desired_title = self.get_rename(output_dict)

        if desired_title is not None:
            curItem = ImageItem(filename, {"name": desired_title})
        else:
            curItem = ImageItem(filename)

        redactList = get_standard_redactions(curItem, desired_title)

        newTitle = get_generated_title(
            curItem
        )  # The newtitle is the filename without the extension
        tileSource = curItem.tileSource
        labelImage = self.get_deid_label(output_dict)

        macroImage = self.get_deid_macro(output_dict)

        format = determine_format(tileSource)
        func = None
        if format is not None:
            # fadvise_willneed(curItem)  ## DETERMINE WHAT THIS FUNCTION DOSE..
            func = getattr(self, "redact_format_" + format)
        if func is None:
            return json.dumps({"error": "FORMAT NOT AVAILABLE FOR DEID YET: {}".format(format)})

        return curItem, output_dir, tileSource, redactList, newTitle, labelImage, macroImage, func

    def preview_metadata(self, output_dict):
        curItem, output_dir, tileSource, redactList, newTitle, labelImage, macroImage, func = self.setup_deid(output_dict)

        prior_ifds, new_ifds = func(curItem, output_dir, redactList, newTitle, labelImage, macroImage, preview_metadata=True)

        self.make_ifds_json_serializable(prior_ifds)
        self.make_ifds_json_serializable(new_ifds)

        self.replace_long_data(prior_ifds)
        self.replace_long_data(new_ifds)

        return prior_ifds, new_ifds, redactList

    def make_ifds_json_serializable(self, ifds):
        for ifd in ifds:
            for tag in ifd['tags']:
                if isinstance(ifd['tags'][tag]['data'], bytes):
                    ifd['tags'][tag]['data'] = base64.b64encode(ifd['tags'][tag]['data']).decode('utf-8')


    def replace_long_data(self, ifds):
        for ifd in ifds:
            for tag in ifd['tags']:
                if len(ifd['tags'][tag]['data']) > 10000:
                    ifd['tags'][tag]['data'] = 'Long data length {}'.format(len(ifd['tags'][tag]['data']))

    def perform_deid(self, output_dict):
        curItem, output_dir, tileSource, redactList, newTitle, labelImage, macroImage, func = self.setup_deid(output_dict)
        
        file, mimetype = func(
            curItem, output_dir, redactList, newTitle, labelImage, macroImage
        )
        info = {
            # "format": format,
            "model": model_information(tileSource, format),
            "mimetype": mimetype,
            "redactionCount": {
                key: len([k for k, v in redactList[key].items() if "value" in v and v["value"] is None])
                for key in redactList
                if key != "area"
            },
            "fieldCount": {
                "metadata": metadata_field_count(tileSource, format, redactList),
                "images": len(tileSource.getAssociatedImagesList()),
            },
        }

        return json.dumps({"output_path": file, "info": info})

    def apply_workflow_to_filename_with_output_dir(self, output_dict):
        '''
        Function that applies a de-identification workflow to the given filename.
        Based on wsi_deid, but rewritten to remove dependency on girder to be run locally without docker.

        :param output_dict (A dictionary of information used to deid the file)
        :return: modified file and its corresponding information
        '''

        return self.perform_deid(output_dict)

    def __init__(self, supress_print=False, output_dir=os.path.join('./output/.'), **kwargs):
        self._config = kwargs
        self.supress_print = supress_print
        self.output_dir = output_dir
        self.logger = logging.getLogger(__name__)
        self.logger.setLevel(logging.DEBUG)  # Pass everything; let filters handle level-based filtering
        self.logger.setLevel(logging.DEBUG)  # Pass everything; let filters handle level-based filtering